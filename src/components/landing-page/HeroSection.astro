---
import { DOODLE_EMOJIS } from "@/consts";
import type { Doodle } from "@/schemas/doodle";
import ScrollingTags from "./ScrollingTags.astro";

export interface Props {
  uniqueTags: string[];
  doodle?: Doodle & { href: string };
}

const { uniqueTags, doodle } = Astro.props as Props;
const doodleEmoji =
  DOODLE_EMOJIS[Math.floor(Math.random() * DOODLE_EMOJIS.length)];
---

<section
  class="relative h-[calc(100vh-4rem)] overflow-hidden bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950"
>
  <div
    class="absolute inset-0 bg-[linear-gradient(to_right,#0f172a_1px,transparent_1px),linear-gradient(to_bottom,#0f172a_1px,transparent_1px)] bg-[size:4rem_4rem] [mask-image:radial-gradient(ellipse_60%_50%_at_50%_0%,#000_70%,transparent_110%)] animate-pulse"
  >
  </div>

  <ScrollingTags uniqueTags={uniqueTags} />

  <div
    class="absolute top-1/4 left-1/4 w-96 h-96 bg-emerald-500/10 rounded-full blur-3xl animate-pulse"
  >
  </div>
  <div
    class="absolute bottom-1/4 right-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse delay-1000"
  >
  </div>
  <div
    class="absolute top-1/2 right-1/3 w-64 h-64 bg-purple-500/10 rounded-full blur-2xl animate-pulse delay-2000"
  >
  </div>

  <div
    class="relative mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 h-full flex items-center pointer-events-none"
  >
    <div class="text-center w-full">
      <div
        class="relative flex flex-col justify-center items-center pointer-events-auto"
        id="mona-text"
      >
        <div id="hero-content">
          {doodle ? (
            <>
              <h1
                class="mb-4 text-5xl font-bold tracking-tight text-white sm:text-7xl"
              >
                <span
                  class="relative inline-block text-primary text-glow animate-pulse"
                >
                  {doodleEmoji}
                </span>&nbsp;{doodle.title}
              </h1>

              <p class="mx-auto max-w-3xl text-xl text-white leading-relaxed">
                {doodle.description}
              </p>
            </>
          ) : (
            <>
              <h1
                class="mb-4 text-5xl font-bold tracking-tight text-white sm:text-7xl"
              >
                <span
                  class="relative inline-block text-primary text-glow animate-pulse"
                >
                  Mona
                </span>{" "}— Learn from What We Build
              </h1>

              <p class="mx-auto max-w-3xl text-xl text-white leading-relaxed">
                Practical
                <span class="text-nebula"> insights</span>,{" "}
                <span class="text-solar">concise notes</span>{" "}
                and{" "}
                <span class="text-cosmic"> hands-on guides </span>
                — created by developers, for developers.
              </p>
            </>
          )}
        </div>

        {doodle && (
          <a
            href={doodle.href}
            class="mt-6 inline-flex items-center gap-2 px-6 py-3 bg-white/10 hover:bg-white/20 rounded-lg transition-colors opacity-0 translate-y-2 pointer-events-none transform"
            data-hero-button
          >
            Know More →
          </a>
        )}
      </div>
    </div>
  </div>
</section>

<script>
  import { createTimeline, stagger, text } from "animejs";

  document.addEventListener("DOMContentLoaded", () => {
    const heroContent = document.getElementById("hero-content");
    const heroButton = document.querySelector("[data-hero-button]") as
      | HTMLAnchorElement
      | null;

    const startTags = () => {
      document.dispatchEvent(new Event("start-tags"));
    };

    const revealButton = () => {
      if (!heroButton) {
        startTags();
        return;
      }

      const buttonTimeline = createTimeline({
      });

      buttonTimeline.add(heroButton, {});

      buttonTimeline.init().then(() => {
        heroButton.classList.remove(
          "opacity-0",
          "translate-y-2",
          "pointer-events-none",
        );
        heroButton.classList.add("pointer-events-auto");
        startTags();
      });
    };

    if (heroContent) {
      const { chars } = text.split(heroContent, {
        words: false,
        chars: true,
      });

      const headlineTimeline = createTimeline({
        loop: false,
        defaults: { ease: "inOut(3)", duration: 1500 },
      });

      headlineTimeline
        .add(
          chars,
          {
            y: [($el) => (+$el.dataset.line % 2 ? "100%" : "-200%"), "0%"],
            opacity: [0, 1],
          },
          stagger(10, { from: "random" })
        )
        .init()
        .then(revealButton);
    } else {
      revealButton();
    }
  });
</script>
